// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import ()

const TableNameUser = "users"

// User mapped from table <users>
type User struct {
	ID             int64   `gorm:"column:id;type:bigint(20) unsigned;primaryKey;autoIncrement:true" json:"id,string"`
	CreatedAt      int64   `gorm:"column:created_at;comment:创建时间" json:"createdAt"`
	UpdatedAt      int64   `gorm:"column:updated_at;comment:更新时间" json:"updatedAt"`
	Username       string  `gorm:"column:username;type:varchar(20);not null" json:"username"`
	Password       string  `gorm:"column:password;type:varchar(255);not null" json:"password"`
	Mobile         string  `gorm:"column:mobile;type:varchar(11);not null" json:"mobile"`
	Avatar         string  `gorm:"column:avatar;type:varchar(255)" json:"avatar"`
	Nickname       string  `gorm:"column:nickname;type:varchar(20)" json:"nickname"`
	Introduction   string  `gorm:"column:introduction;type:varchar(255)" json:"introduction"`
	Status         int64   `gorm:"column:status;type:tinyint(1);default:1;comment:'1正常, 2禁用'" json:"status"` // '1正常, 2禁用'
	Creator        string  `gorm:"column:creator;type:varchar(20)" json:"creator"`
	Bio            string  `gorm:"column:bio;type:varchar(255);not null;comment:个人简介" json:"bio"`                   // 个人简介
	FollowersCount int64   `gorm:"column:followers_count;type:int(11);not null;comment:粉丝数量" json:"followersCount"` // 粉丝数量
	Manager        string  `gorm:"column:manager;type:varchar(50);not null;comment:上级" json:"manager"`              // 上级
	Roles          []*Role `gorm:"many2many:user_roles" json:"roles"`
}

// TableName User's table name
func (*User) TableName() string {
	return TableNameUser
}
