// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"LiveData/model"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newViolations(db *gorm.DB, opts ...gen.DOOption) violations {
	_violations := violations{}

	_violations.violationsDo.UseDB(db, opts...)
	_violations.violationsDo.UseModel(&model.Violations{})

	tableName := _violations.violationsDo.TableName()
	_violations.ALL = field.NewAsterisk(tableName)
	_violations.ID = field.NewInt64(tableName, "id")
	_violations.HostNickname = field.NewString(tableName, "host_nickname")
	_violations.HostID = field.NewInt64(tableName, "host_id")
	_violations.UID = field.NewInt64(tableName, "uid")
	_violations.McnName = field.NewString(tableName, "mcn_name")
	_violations.SecurityCode = field.NewString(tableName, "security_code")
	_violations.AccountStatus = field.NewString(tableName, "account_status")
	_violations.ViolationNumber = field.NewString(tableName, "violation_number")
	_violations.ViolationType = field.NewString(tableName, "violation_type")
	_violations.ViolationEffect = field.NewString(tableName, "violation_effect")
	_violations.ViolationTime = field.NewInt64(tableName, "violation_time")
	_violations.ViolationReason = field.NewString(tableName, "violation_reason")
	_violations.ViolationImpact = field.NewString(tableName, "violation_impact")
	_violations.ViolationLiveRoomID = field.NewString(tableName, "violation_live_room_id")
	_violations.CreatedAt = field.NewInt64(tableName, "created_at")

	_violations.fillFieldMap()

	return _violations
}

// violations 违规记录表
type violations struct {
	violationsDo

	ALL                 field.Asterisk
	ID                  field.Int64  // 主键ID
	HostNickname        field.String // 主播昵称
	HostID              field.Int64  // 主播ID
	UID                 field.Int64  // uid
	McnName             field.String // MCN名称
	SecurityCode        field.String // 安全码
	AccountStatus       field.String // 账号状态
	ViolationNumber     field.String // 违规编号
	ViolationType       field.String // 违规类型
	ViolationEffect     field.String // 违规影响
	ViolationTime       field.Int64  // 违规时间（Unix 时间戳）
	ViolationReason     field.String // 违规原因
	ViolationImpact     field.String // 违规影响
	ViolationLiveRoomID field.String // 违规对象是直播间的ID
	CreatedAt           field.Int64  // 创建时间（Unix 时间戳）

	fieldMap map[string]field.Expr
}

func (v violations) Table(newTableName string) *violations {
	v.violationsDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v violations) As(alias string) *violations {
	v.violationsDo.DO = *(v.violationsDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *violations) updateTableName(table string) *violations {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.HostNickname = field.NewString(table, "host_nickname")
	v.HostID = field.NewInt64(table, "host_id")
	v.UID = field.NewInt64(table, "uid")
	v.McnName = field.NewString(table, "mcn_name")
	v.SecurityCode = field.NewString(table, "security_code")
	v.AccountStatus = field.NewString(table, "account_status")
	v.ViolationNumber = field.NewString(table, "violation_number")
	v.ViolationType = field.NewString(table, "violation_type")
	v.ViolationEffect = field.NewString(table, "violation_effect")
	v.ViolationTime = field.NewInt64(table, "violation_time")
	v.ViolationReason = field.NewString(table, "violation_reason")
	v.ViolationImpact = field.NewString(table, "violation_impact")
	v.ViolationLiveRoomID = field.NewString(table, "violation_live_room_id")
	v.CreatedAt = field.NewInt64(table, "created_at")

	v.fillFieldMap()

	return v
}

func (v *violations) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *violations) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 15)
	v.fieldMap["id"] = v.ID
	v.fieldMap["host_nickname"] = v.HostNickname
	v.fieldMap["host_id"] = v.HostID
	v.fieldMap["uid"] = v.UID
	v.fieldMap["mcn_name"] = v.McnName
	v.fieldMap["security_code"] = v.SecurityCode
	v.fieldMap["account_status"] = v.AccountStatus
	v.fieldMap["violation_number"] = v.ViolationNumber
	v.fieldMap["violation_type"] = v.ViolationType
	v.fieldMap["violation_effect"] = v.ViolationEffect
	v.fieldMap["violation_time"] = v.ViolationTime
	v.fieldMap["violation_reason"] = v.ViolationReason
	v.fieldMap["violation_impact"] = v.ViolationImpact
	v.fieldMap["violation_live_room_id"] = v.ViolationLiveRoomID
	v.fieldMap["created_at"] = v.CreatedAt
}

func (v violations) clone(db *gorm.DB) violations {
	v.violationsDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v violations) replaceDB(db *gorm.DB) violations {
	v.violationsDo.ReplaceDB(db)
	return v
}

type violationsDo struct{ gen.DO }

type IViolationsDo interface {
	gen.SubQuery
	Debug() IViolationsDo
	WithContext(ctx context.Context) IViolationsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IViolationsDo
	WriteDB() IViolationsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IViolationsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IViolationsDo
	Not(conds ...gen.Condition) IViolationsDo
	Or(conds ...gen.Condition) IViolationsDo
	Select(conds ...field.Expr) IViolationsDo
	Where(conds ...gen.Condition) IViolationsDo
	Order(conds ...field.Expr) IViolationsDo
	Distinct(cols ...field.Expr) IViolationsDo
	Omit(cols ...field.Expr) IViolationsDo
	Join(table schema.Tabler, on ...field.Expr) IViolationsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IViolationsDo
	RightJoin(table schema.Tabler, on ...field.Expr) IViolationsDo
	Group(cols ...field.Expr) IViolationsDo
	Having(conds ...gen.Condition) IViolationsDo
	Limit(limit int) IViolationsDo
	Offset(offset int) IViolationsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IViolationsDo
	Unscoped() IViolationsDo
	Create(values ...*model.Violations) error
	CreateInBatches(values []*model.Violations, batchSize int) error
	Save(values ...*model.Violations) error
	First() (*model.Violations, error)
	Take() (*model.Violations, error)
	Last() (*model.Violations, error)
	Find() ([]*model.Violations, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Violations, err error)
	FindInBatches(result *[]*model.Violations, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Violations) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IViolationsDo
	Assign(attrs ...field.AssignExpr) IViolationsDo
	Joins(fields ...field.RelationField) IViolationsDo
	Preload(fields ...field.RelationField) IViolationsDo
	FirstOrInit() (*model.Violations, error)
	FirstOrCreate() (*model.Violations, error)
	FindByPage(offset int, limit int) (result []*model.Violations, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IViolationsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v violationsDo) Debug() IViolationsDo {
	return v.withDO(v.DO.Debug())
}

func (v violationsDo) WithContext(ctx context.Context) IViolationsDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v violationsDo) ReadDB() IViolationsDo {
	return v.Clauses(dbresolver.Read)
}

func (v violationsDo) WriteDB() IViolationsDo {
	return v.Clauses(dbresolver.Write)
}

func (v violationsDo) Session(config *gorm.Session) IViolationsDo {
	return v.withDO(v.DO.Session(config))
}

func (v violationsDo) Clauses(conds ...clause.Expression) IViolationsDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v violationsDo) Returning(value interface{}, columns ...string) IViolationsDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v violationsDo) Not(conds ...gen.Condition) IViolationsDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v violationsDo) Or(conds ...gen.Condition) IViolationsDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v violationsDo) Select(conds ...field.Expr) IViolationsDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v violationsDo) Where(conds ...gen.Condition) IViolationsDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v violationsDo) Order(conds ...field.Expr) IViolationsDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v violationsDo) Distinct(cols ...field.Expr) IViolationsDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v violationsDo) Omit(cols ...field.Expr) IViolationsDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v violationsDo) Join(table schema.Tabler, on ...field.Expr) IViolationsDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v violationsDo) LeftJoin(table schema.Tabler, on ...field.Expr) IViolationsDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v violationsDo) RightJoin(table schema.Tabler, on ...field.Expr) IViolationsDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v violationsDo) Group(cols ...field.Expr) IViolationsDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v violationsDo) Having(conds ...gen.Condition) IViolationsDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v violationsDo) Limit(limit int) IViolationsDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v violationsDo) Offset(offset int) IViolationsDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v violationsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IViolationsDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v violationsDo) Unscoped() IViolationsDo {
	return v.withDO(v.DO.Unscoped())
}

func (v violationsDo) Create(values ...*model.Violations) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v violationsDo) CreateInBatches(values []*model.Violations, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v violationsDo) Save(values ...*model.Violations) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v violationsDo) First() (*model.Violations, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Violations), nil
	}
}

func (v violationsDo) Take() (*model.Violations, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Violations), nil
	}
}

func (v violationsDo) Last() (*model.Violations, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Violations), nil
	}
}

func (v violationsDo) Find() ([]*model.Violations, error) {
	result, err := v.DO.Find()
	return result.([]*model.Violations), err
}

func (v violationsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Violations, err error) {
	buf := make([]*model.Violations, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v violationsDo) FindInBatches(result *[]*model.Violations, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v violationsDo) Attrs(attrs ...field.AssignExpr) IViolationsDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v violationsDo) Assign(attrs ...field.AssignExpr) IViolationsDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v violationsDo) Joins(fields ...field.RelationField) IViolationsDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v violationsDo) Preload(fields ...field.RelationField) IViolationsDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v violationsDo) FirstOrInit() (*model.Violations, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Violations), nil
	}
}

func (v violationsDo) FirstOrCreate() (*model.Violations, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Violations), nil
	}
}

func (v violationsDo) FindByPage(offset int, limit int) (result []*model.Violations, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v violationsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v violationsDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v violationsDo) Delete(models ...*model.Violations) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *violationsDo) withDO(do gen.Dao) *violationsDo {
	v.DO = *do.(*gen.DO)
	return v
}
