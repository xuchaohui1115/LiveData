// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"demo20220320/model"
)

func newLiveDetail(db *gorm.DB, opts ...gen.DOOption) liveDetail {
	_liveDetail := liveDetail{}

	_liveDetail.liveDetailDo.UseDB(db, opts...)
	_liveDetail.liveDetailDo.UseModel(&model.LiveDetail{})

	tableName := _liveDetail.liveDetailDo.TableName()
	_liveDetail.ALL = field.NewAsterisk(tableName)
	_liveDetail.LiveRoomID = field.NewInt64(tableName, "live_room_id")
	_liveDetail.LiveTitle = field.NewString(tableName, "live_title")
	_liveDetail.LiveStartTime = field.NewInt64(tableName, "live_start_time")
	_liveDetail.HostID = field.NewInt64(tableName, "host_id")
	_liveDetail.CreatedAt = field.NewInt64(tableName, "created_at")

	_liveDetail.fillFieldMap()

	return _liveDetail
}

// liveDetail 直播间详情表
type liveDetail struct {
	liveDetailDo

	ALL           field.Asterisk
	LiveRoomID    field.Int64  // 直播间ID，主键
	LiveTitle     field.String // 直播标题
	LiveStartTime field.Int64  // 开播时间（Unix 时间戳）
	HostID        field.Int64  // 主播ID，用于关联主播
	CreatedAt     field.Int64  // 创建时间（Unix 时间戳)

	fieldMap map[string]field.Expr
}

func (l liveDetail) Table(newTableName string) *liveDetail {
	l.liveDetailDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l liveDetail) As(alias string) *liveDetail {
	l.liveDetailDo.DO = *(l.liveDetailDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *liveDetail) updateTableName(table string) *liveDetail {
	l.ALL = field.NewAsterisk(table)
	l.LiveRoomID = field.NewInt64(table, "live_room_id")
	l.LiveTitle = field.NewString(table, "live_title")
	l.LiveStartTime = field.NewInt64(table, "live_start_time")
	l.HostID = field.NewInt64(table, "host_id")
	l.CreatedAt = field.NewInt64(table, "created_at")

	l.fillFieldMap()

	return l
}

func (l *liveDetail) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *liveDetail) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 5)
	l.fieldMap["live_room_id"] = l.LiveRoomID
	l.fieldMap["live_title"] = l.LiveTitle
	l.fieldMap["live_start_time"] = l.LiveStartTime
	l.fieldMap["host_id"] = l.HostID
	l.fieldMap["created_at"] = l.CreatedAt
}

func (l liveDetail) clone(db *gorm.DB) liveDetail {
	l.liveDetailDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l liveDetail) replaceDB(db *gorm.DB) liveDetail {
	l.liveDetailDo.ReplaceDB(db)
	return l
}

type liveDetailDo struct{ gen.DO }

type ILiveDetailDo interface {
	gen.SubQuery
	Debug() ILiveDetailDo
	WithContext(ctx context.Context) ILiveDetailDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILiveDetailDo
	WriteDB() ILiveDetailDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILiveDetailDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILiveDetailDo
	Not(conds ...gen.Condition) ILiveDetailDo
	Or(conds ...gen.Condition) ILiveDetailDo
	Select(conds ...field.Expr) ILiveDetailDo
	Where(conds ...gen.Condition) ILiveDetailDo
	Order(conds ...field.Expr) ILiveDetailDo
	Distinct(cols ...field.Expr) ILiveDetailDo
	Omit(cols ...field.Expr) ILiveDetailDo
	Join(table schema.Tabler, on ...field.Expr) ILiveDetailDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILiveDetailDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILiveDetailDo
	Group(cols ...field.Expr) ILiveDetailDo
	Having(conds ...gen.Condition) ILiveDetailDo
	Limit(limit int) ILiveDetailDo
	Offset(offset int) ILiveDetailDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveDetailDo
	Unscoped() ILiveDetailDo
	Create(values ...*model.LiveDetail) error
	CreateInBatches(values []*model.LiveDetail, batchSize int) error
	Save(values ...*model.LiveDetail) error
	First() (*model.LiveDetail, error)
	Take() (*model.LiveDetail, error)
	Last() (*model.LiveDetail, error)
	Find() ([]*model.LiveDetail, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveDetail, err error)
	FindInBatches(result *[]*model.LiveDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LiveDetail) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILiveDetailDo
	Assign(attrs ...field.AssignExpr) ILiveDetailDo
	Joins(fields ...field.RelationField) ILiveDetailDo
	Preload(fields ...field.RelationField) ILiveDetailDo
	FirstOrInit() (*model.LiveDetail, error)
	FirstOrCreate() (*model.LiveDetail, error)
	FindByPage(offset int, limit int) (result []*model.LiveDetail, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILiveDetailDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l liveDetailDo) Debug() ILiveDetailDo {
	return l.withDO(l.DO.Debug())
}

func (l liveDetailDo) WithContext(ctx context.Context) ILiveDetailDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l liveDetailDo) ReadDB() ILiveDetailDo {
	return l.Clauses(dbresolver.Read)
}

func (l liveDetailDo) WriteDB() ILiveDetailDo {
	return l.Clauses(dbresolver.Write)
}

func (l liveDetailDo) Session(config *gorm.Session) ILiveDetailDo {
	return l.withDO(l.DO.Session(config))
}

func (l liveDetailDo) Clauses(conds ...clause.Expression) ILiveDetailDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l liveDetailDo) Returning(value interface{}, columns ...string) ILiveDetailDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l liveDetailDo) Not(conds ...gen.Condition) ILiveDetailDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l liveDetailDo) Or(conds ...gen.Condition) ILiveDetailDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l liveDetailDo) Select(conds ...field.Expr) ILiveDetailDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l liveDetailDo) Where(conds ...gen.Condition) ILiveDetailDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l liveDetailDo) Order(conds ...field.Expr) ILiveDetailDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l liveDetailDo) Distinct(cols ...field.Expr) ILiveDetailDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l liveDetailDo) Omit(cols ...field.Expr) ILiveDetailDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l liveDetailDo) Join(table schema.Tabler, on ...field.Expr) ILiveDetailDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l liveDetailDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILiveDetailDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l liveDetailDo) RightJoin(table schema.Tabler, on ...field.Expr) ILiveDetailDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l liveDetailDo) Group(cols ...field.Expr) ILiveDetailDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l liveDetailDo) Having(conds ...gen.Condition) ILiveDetailDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l liveDetailDo) Limit(limit int) ILiveDetailDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l liveDetailDo) Offset(offset int) ILiveDetailDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l liveDetailDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILiveDetailDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l liveDetailDo) Unscoped() ILiveDetailDo {
	return l.withDO(l.DO.Unscoped())
}

func (l liveDetailDo) Create(values ...*model.LiveDetail) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l liveDetailDo) CreateInBatches(values []*model.LiveDetail, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l liveDetailDo) Save(values ...*model.LiveDetail) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l liveDetailDo) First() (*model.LiveDetail, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveDetail), nil
	}
}

func (l liveDetailDo) Take() (*model.LiveDetail, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveDetail), nil
	}
}

func (l liveDetailDo) Last() (*model.LiveDetail, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveDetail), nil
	}
}

func (l liveDetailDo) Find() ([]*model.LiveDetail, error) {
	result, err := l.DO.Find()
	return result.([]*model.LiveDetail), err
}

func (l liveDetailDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LiveDetail, err error) {
	buf := make([]*model.LiveDetail, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l liveDetailDo) FindInBatches(result *[]*model.LiveDetail, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l liveDetailDo) Attrs(attrs ...field.AssignExpr) ILiveDetailDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l liveDetailDo) Assign(attrs ...field.AssignExpr) ILiveDetailDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l liveDetailDo) Joins(fields ...field.RelationField) ILiveDetailDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l liveDetailDo) Preload(fields ...field.RelationField) ILiveDetailDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l liveDetailDo) FirstOrInit() (*model.LiveDetail, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveDetail), nil
	}
}

func (l liveDetailDo) FirstOrCreate() (*model.LiveDetail, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LiveDetail), nil
	}
}

func (l liveDetailDo) FindByPage(offset int, limit int) (result []*model.LiveDetail, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l liveDetailDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l liveDetailDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l liveDetailDo) Delete(models ...*model.LiveDetail) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *liveDetailDo) withDO(do gen.Dao) *liveDetailDo {
	l.DO = *do.(*gen.DO)
	return l
}
