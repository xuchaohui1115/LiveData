// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"LiveData/model"
)

func newSuperAdmin(db *gorm.DB, opts ...gen.DOOption) superAdmin {
	_superAdmin := superAdmin{}

	_superAdmin.superAdminDo.UseDB(db, opts...)
	_superAdmin.superAdminDo.UseModel(&model.SuperAdmin{})

	tableName := _superAdmin.superAdminDo.TableName()
	_superAdmin.ALL = field.NewAsterisk(tableName)
	_superAdmin.ID = field.NewInt64(tableName, "id")
	_superAdmin.Username = field.NewString(tableName, "username")
	_superAdmin.Password = field.NewString(tableName, "password")
	_superAdmin.Nickname = field.NewString(tableName, "nickname")
	_superAdmin.Phone = field.NewString(tableName, "phone")
	_superAdmin.Status = field.NewString(tableName, "status")
	_superAdmin.CreatedAt = field.NewInt64(tableName, "created_at")
	_superAdmin.UpdatedAt = field.NewInt64(tableName, "updated_at")

	_superAdmin.fillFieldMap()

	return _superAdmin
}

// superAdmin 超级管理员表
type superAdmin struct {
	superAdminDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键ID
	Username  field.String // 用户名，唯一
	Password  field.String // 密码（建议加密存储）
	Nickname  field.String // 昵称
	Phone     field.String // 手机号码
	Status    field.String // 状态
	CreatedAt field.Int64  // 创建时间（Unix 时间戳）
	UpdatedAt field.Int64  // 修改时间（Unix 时间戳）

	fieldMap map[string]field.Expr
}

func (s superAdmin) Table(newTableName string) *superAdmin {
	s.superAdminDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s superAdmin) As(alias string) *superAdmin {
	s.superAdminDo.DO = *(s.superAdminDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *superAdmin) updateTableName(table string) *superAdmin {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Username = field.NewString(table, "username")
	s.Password = field.NewString(table, "password")
	s.Nickname = field.NewString(table, "nickname")
	s.Phone = field.NewString(table, "phone")
	s.Status = field.NewString(table, "status")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *superAdmin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *superAdmin) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["username"] = s.Username
	s.fieldMap["password"] = s.Password
	s.fieldMap["nickname"] = s.Nickname
	s.fieldMap["phone"] = s.Phone
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s superAdmin) clone(db *gorm.DB) superAdmin {
	s.superAdminDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s superAdmin) replaceDB(db *gorm.DB) superAdmin {
	s.superAdminDo.ReplaceDB(db)
	return s
}

type superAdminDo struct{ gen.DO }

type ISuperAdminDo interface {
	gen.SubQuery
	Debug() ISuperAdminDo
	WithContext(ctx context.Context) ISuperAdminDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISuperAdminDo
	WriteDB() ISuperAdminDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISuperAdminDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISuperAdminDo
	Not(conds ...gen.Condition) ISuperAdminDo
	Or(conds ...gen.Condition) ISuperAdminDo
	Select(conds ...field.Expr) ISuperAdminDo
	Where(conds ...gen.Condition) ISuperAdminDo
	Order(conds ...field.Expr) ISuperAdminDo
	Distinct(cols ...field.Expr) ISuperAdminDo
	Omit(cols ...field.Expr) ISuperAdminDo
	Join(table schema.Tabler, on ...field.Expr) ISuperAdminDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISuperAdminDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISuperAdminDo
	Group(cols ...field.Expr) ISuperAdminDo
	Having(conds ...gen.Condition) ISuperAdminDo
	Limit(limit int) ISuperAdminDo
	Offset(offset int) ISuperAdminDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISuperAdminDo
	Unscoped() ISuperAdminDo
	Create(values ...*model.SuperAdmin) error
	CreateInBatches(values []*model.SuperAdmin, batchSize int) error
	Save(values ...*model.SuperAdmin) error
	First() (*model.SuperAdmin, error)
	Take() (*model.SuperAdmin, error)
	Last() (*model.SuperAdmin, error)
	Find() ([]*model.SuperAdmin, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SuperAdmin, err error)
	FindInBatches(result *[]*model.SuperAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SuperAdmin) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISuperAdminDo
	Assign(attrs ...field.AssignExpr) ISuperAdminDo
	Joins(fields ...field.RelationField) ISuperAdminDo
	Preload(fields ...field.RelationField) ISuperAdminDo
	FirstOrInit() (*model.SuperAdmin, error)
	FirstOrCreate() (*model.SuperAdmin, error)
	FindByPage(offset int, limit int) (result []*model.SuperAdmin, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISuperAdminDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s superAdminDo) Debug() ISuperAdminDo {
	return s.withDO(s.DO.Debug())
}

func (s superAdminDo) WithContext(ctx context.Context) ISuperAdminDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s superAdminDo) ReadDB() ISuperAdminDo {
	return s.Clauses(dbresolver.Read)
}

func (s superAdminDo) WriteDB() ISuperAdminDo {
	return s.Clauses(dbresolver.Write)
}

func (s superAdminDo) Session(config *gorm.Session) ISuperAdminDo {
	return s.withDO(s.DO.Session(config))
}

func (s superAdminDo) Clauses(conds ...clause.Expression) ISuperAdminDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s superAdminDo) Returning(value interface{}, columns ...string) ISuperAdminDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s superAdminDo) Not(conds ...gen.Condition) ISuperAdminDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s superAdminDo) Or(conds ...gen.Condition) ISuperAdminDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s superAdminDo) Select(conds ...field.Expr) ISuperAdminDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s superAdminDo) Where(conds ...gen.Condition) ISuperAdminDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s superAdminDo) Order(conds ...field.Expr) ISuperAdminDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s superAdminDo) Distinct(cols ...field.Expr) ISuperAdminDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s superAdminDo) Omit(cols ...field.Expr) ISuperAdminDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s superAdminDo) Join(table schema.Tabler, on ...field.Expr) ISuperAdminDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s superAdminDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISuperAdminDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s superAdminDo) RightJoin(table schema.Tabler, on ...field.Expr) ISuperAdminDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s superAdminDo) Group(cols ...field.Expr) ISuperAdminDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s superAdminDo) Having(conds ...gen.Condition) ISuperAdminDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s superAdminDo) Limit(limit int) ISuperAdminDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s superAdminDo) Offset(offset int) ISuperAdminDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s superAdminDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISuperAdminDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s superAdminDo) Unscoped() ISuperAdminDo {
	return s.withDO(s.DO.Unscoped())
}

func (s superAdminDo) Create(values ...*model.SuperAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s superAdminDo) CreateInBatches(values []*model.SuperAdmin, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s superAdminDo) Save(values ...*model.SuperAdmin) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s superAdminDo) First() (*model.SuperAdmin, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SuperAdmin), nil
	}
}

func (s superAdminDo) Take() (*model.SuperAdmin, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SuperAdmin), nil
	}
}

func (s superAdminDo) Last() (*model.SuperAdmin, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SuperAdmin), nil
	}
}

func (s superAdminDo) Find() ([]*model.SuperAdmin, error) {
	result, err := s.DO.Find()
	return result.([]*model.SuperAdmin), err
}

func (s superAdminDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SuperAdmin, err error) {
	buf := make([]*model.SuperAdmin, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s superAdminDo) FindInBatches(result *[]*model.SuperAdmin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s superAdminDo) Attrs(attrs ...field.AssignExpr) ISuperAdminDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s superAdminDo) Assign(attrs ...field.AssignExpr) ISuperAdminDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s superAdminDo) Joins(fields ...field.RelationField) ISuperAdminDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s superAdminDo) Preload(fields ...field.RelationField) ISuperAdminDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s superAdminDo) FirstOrInit() (*model.SuperAdmin, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SuperAdmin), nil
	}
}

func (s superAdminDo) FirstOrCreate() (*model.SuperAdmin, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SuperAdmin), nil
	}
}

func (s superAdminDo) FindByPage(offset int, limit int) (result []*model.SuperAdmin, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s superAdminDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s superAdminDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s superAdminDo) Delete(models ...*model.SuperAdmin) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *superAdminDo) withDO(do gen.Dao) *superAdminDo {
	s.DO = *do.(*gen.DO)
	return s
}
