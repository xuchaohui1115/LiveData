// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"demo20220320/model"
)

func newAPI(db *gorm.DB, opts ...gen.DOOption) aPI {
	_aPI := aPI{}

	_aPI.aPIDo.UseDB(db, opts...)
	_aPI.aPIDo.UseModel(&model.API{})

	tableName := _aPI.aPIDo.TableName()
	_aPI.ALL = field.NewAsterisk(tableName)
	_aPI.ID = field.NewInt64(tableName, "id")
	_aPI.CreatedAt = field.NewTime(tableName, "created_at")
	_aPI.UpdatedAt = field.NewTime(tableName, "updated_at")
	_aPI.DeletedAt = field.NewField(tableName, "deleted_at")
	_aPI.Method = field.NewString(tableName, "method")
	_aPI.Path = field.NewString(tableName, "path")
	_aPI.Category = field.NewString(tableName, "category")
	_aPI.Desc = field.NewString(tableName, "desc")
	_aPI.Creator = field.NewString(tableName, "creator")

	_aPI.fillFieldMap()

	return _aPI
}

type aPI struct {
	aPIDo

	ALL       field.Asterisk
	ID        field.Int64
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Method    field.String // '请求方式'
	Path      field.String // '访问路径'
	Category  field.String // '所属类别'
	Desc      field.String // '说明'
	Creator   field.String // '创建人'

	fieldMap map[string]field.Expr
}

func (a aPI) Table(newTableName string) *aPI {
	a.aPIDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a aPI) As(alias string) *aPI {
	a.aPIDo.DO = *(a.aPIDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *aPI) updateTableName(table string) *aPI {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.Method = field.NewString(table, "method")
	a.Path = field.NewString(table, "path")
	a.Category = field.NewString(table, "category")
	a.Desc = field.NewString(table, "desc")
	a.Creator = field.NewString(table, "creator")

	a.fillFieldMap()

	return a
}

func (a *aPI) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *aPI) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["method"] = a.Method
	a.fieldMap["path"] = a.Path
	a.fieldMap["category"] = a.Category
	a.fieldMap["desc"] = a.Desc
	a.fieldMap["creator"] = a.Creator
}

func (a aPI) clone(db *gorm.DB) aPI {
	a.aPIDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a aPI) replaceDB(db *gorm.DB) aPI {
	a.aPIDo.ReplaceDB(db)
	return a
}

type aPIDo struct{ gen.DO }

type IAPIDo interface {
	gen.SubQuery
	Debug() IAPIDo
	WithContext(ctx context.Context) IAPIDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAPIDo
	WriteDB() IAPIDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAPIDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAPIDo
	Not(conds ...gen.Condition) IAPIDo
	Or(conds ...gen.Condition) IAPIDo
	Select(conds ...field.Expr) IAPIDo
	Where(conds ...gen.Condition) IAPIDo
	Order(conds ...field.Expr) IAPIDo
	Distinct(cols ...field.Expr) IAPIDo
	Omit(cols ...field.Expr) IAPIDo
	Join(table schema.Tabler, on ...field.Expr) IAPIDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAPIDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAPIDo
	Group(cols ...field.Expr) IAPIDo
	Having(conds ...gen.Condition) IAPIDo
	Limit(limit int) IAPIDo
	Offset(offset int) IAPIDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIDo
	Unscoped() IAPIDo
	Create(values ...*model.API) error
	CreateInBatches(values []*model.API, batchSize int) error
	Save(values ...*model.API) error
	First() (*model.API, error)
	Take() (*model.API, error)
	Last() (*model.API, error)
	Find() ([]*model.API, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.API, err error)
	FindInBatches(result *[]*model.API, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.API) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAPIDo
	Assign(attrs ...field.AssignExpr) IAPIDo
	Joins(fields ...field.RelationField) IAPIDo
	Preload(fields ...field.RelationField) IAPIDo
	FirstOrInit() (*model.API, error)
	FirstOrCreate() (*model.API, error)
	FindByPage(offset int, limit int) (result []*model.API, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAPIDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a aPIDo) Debug() IAPIDo {
	return a.withDO(a.DO.Debug())
}

func (a aPIDo) WithContext(ctx context.Context) IAPIDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a aPIDo) ReadDB() IAPIDo {
	return a.Clauses(dbresolver.Read)
}

func (a aPIDo) WriteDB() IAPIDo {
	return a.Clauses(dbresolver.Write)
}

func (a aPIDo) Session(config *gorm.Session) IAPIDo {
	return a.withDO(a.DO.Session(config))
}

func (a aPIDo) Clauses(conds ...clause.Expression) IAPIDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a aPIDo) Returning(value interface{}, columns ...string) IAPIDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a aPIDo) Not(conds ...gen.Condition) IAPIDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a aPIDo) Or(conds ...gen.Condition) IAPIDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a aPIDo) Select(conds ...field.Expr) IAPIDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a aPIDo) Where(conds ...gen.Condition) IAPIDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a aPIDo) Order(conds ...field.Expr) IAPIDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a aPIDo) Distinct(cols ...field.Expr) IAPIDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a aPIDo) Omit(cols ...field.Expr) IAPIDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a aPIDo) Join(table schema.Tabler, on ...field.Expr) IAPIDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a aPIDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAPIDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a aPIDo) RightJoin(table schema.Tabler, on ...field.Expr) IAPIDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a aPIDo) Group(cols ...field.Expr) IAPIDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a aPIDo) Having(conds ...gen.Condition) IAPIDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a aPIDo) Limit(limit int) IAPIDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a aPIDo) Offset(offset int) IAPIDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a aPIDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAPIDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a aPIDo) Unscoped() IAPIDo {
	return a.withDO(a.DO.Unscoped())
}

func (a aPIDo) Create(values ...*model.API) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a aPIDo) CreateInBatches(values []*model.API, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a aPIDo) Save(values ...*model.API) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a aPIDo) First() (*model.API, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.API), nil
	}
}

func (a aPIDo) Take() (*model.API, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.API), nil
	}
}

func (a aPIDo) Last() (*model.API, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.API), nil
	}
}

func (a aPIDo) Find() ([]*model.API, error) {
	result, err := a.DO.Find()
	return result.([]*model.API), err
}

func (a aPIDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.API, err error) {
	buf := make([]*model.API, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a aPIDo) FindInBatches(result *[]*model.API, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a aPIDo) Attrs(attrs ...field.AssignExpr) IAPIDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a aPIDo) Assign(attrs ...field.AssignExpr) IAPIDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a aPIDo) Joins(fields ...field.RelationField) IAPIDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a aPIDo) Preload(fields ...field.RelationField) IAPIDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a aPIDo) FirstOrInit() (*model.API, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.API), nil
	}
}

func (a aPIDo) FirstOrCreate() (*model.API, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.API), nil
	}
}

func (a aPIDo) FindByPage(offset int, limit int) (result []*model.API, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a aPIDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a aPIDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a aPIDo) Delete(models ...*model.API) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *aPIDo) withDO(do gen.Dao) *aPIDo {
	a.DO = *do.(*gen.DO)
	return a
}
