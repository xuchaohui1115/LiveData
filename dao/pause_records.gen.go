// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"demo20220320/model"
)

func newPauseRecord(db *gorm.DB, opts ...gen.DOOption) pauseRecord {
	_pauseRecord := pauseRecord{}

	_pauseRecord.pauseRecordDo.UseDB(db, opts...)
	_pauseRecord.pauseRecordDo.UseModel(&model.PauseRecord{})

	tableName := _pauseRecord.pauseRecordDo.TableName()
	_pauseRecord.ALL = field.NewAsterisk(tableName)
	_pauseRecord.ID = field.NewInt64(tableName, "id")
	_pauseRecord.LiveDataID = field.NewInt64(tableName, "live_data_id")
	_pauseRecord.HostID = field.NewInt64(tableName, "host_id")
	_pauseRecord.PauseTime = field.NewInt64(tableName, "pause_time")
	_pauseRecord.ResumeTime = field.NewInt64(tableName, "resume_time")
	_pauseRecord.Duration = field.NewInt64(tableName, "duration")
	_pauseRecord.Reason = field.NewString(tableName, "reason")
	_pauseRecord.CreatedAt = field.NewInt64(tableName, "created_at")

	_pauseRecord.fillFieldMap()

	return _pauseRecord
}

// pauseRecord 暂停记录表
type pauseRecord struct {
	pauseRecordDo

	ALL        field.Asterisk
	ID         field.Int64  // 主键ID
	LiveDataID field.Int64  // 直播数据表的ID，用于关联
	HostID     field.Int64  // 主播ID，用于关联
	PauseTime  field.Int64  // 暂停时间（Unix 时间戳）
	ResumeTime field.Int64  // 恢复时间（Unix 时间戳）
	Duration   field.Int64  // 暂停时长，以分钟为单位
	Reason     field.String // 暂停理由
	CreatedAt  field.Int64  // 创建时间（Unix 时间戳）

	fieldMap map[string]field.Expr
}

func (p pauseRecord) Table(newTableName string) *pauseRecord {
	p.pauseRecordDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pauseRecord) As(alias string) *pauseRecord {
	p.pauseRecordDo.DO = *(p.pauseRecordDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pauseRecord) updateTableName(table string) *pauseRecord {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt64(table, "id")
	p.LiveDataID = field.NewInt64(table, "live_data_id")
	p.HostID = field.NewInt64(table, "host_id")
	p.PauseTime = field.NewInt64(table, "pause_time")
	p.ResumeTime = field.NewInt64(table, "resume_time")
	p.Duration = field.NewInt64(table, "duration")
	p.Reason = field.NewString(table, "reason")
	p.CreatedAt = field.NewInt64(table, "created_at")

	p.fillFieldMap()

	return p
}

func (p *pauseRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pauseRecord) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["live_data_id"] = p.LiveDataID
	p.fieldMap["host_id"] = p.HostID
	p.fieldMap["pause_time"] = p.PauseTime
	p.fieldMap["resume_time"] = p.ResumeTime
	p.fieldMap["duration"] = p.Duration
	p.fieldMap["reason"] = p.Reason
	p.fieldMap["created_at"] = p.CreatedAt
}

func (p pauseRecord) clone(db *gorm.DB) pauseRecord {
	p.pauseRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pauseRecord) replaceDB(db *gorm.DB) pauseRecord {
	p.pauseRecordDo.ReplaceDB(db)
	return p
}

type pauseRecordDo struct{ gen.DO }

type IPauseRecordDo interface {
	gen.SubQuery
	Debug() IPauseRecordDo
	WithContext(ctx context.Context) IPauseRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPauseRecordDo
	WriteDB() IPauseRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPauseRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPauseRecordDo
	Not(conds ...gen.Condition) IPauseRecordDo
	Or(conds ...gen.Condition) IPauseRecordDo
	Select(conds ...field.Expr) IPauseRecordDo
	Where(conds ...gen.Condition) IPauseRecordDo
	Order(conds ...field.Expr) IPauseRecordDo
	Distinct(cols ...field.Expr) IPauseRecordDo
	Omit(cols ...field.Expr) IPauseRecordDo
	Join(table schema.Tabler, on ...field.Expr) IPauseRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPauseRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPauseRecordDo
	Group(cols ...field.Expr) IPauseRecordDo
	Having(conds ...gen.Condition) IPauseRecordDo
	Limit(limit int) IPauseRecordDo
	Offset(offset int) IPauseRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPauseRecordDo
	Unscoped() IPauseRecordDo
	Create(values ...*model.PauseRecord) error
	CreateInBatches(values []*model.PauseRecord, batchSize int) error
	Save(values ...*model.PauseRecord) error
	First() (*model.PauseRecord, error)
	Take() (*model.PauseRecord, error)
	Last() (*model.PauseRecord, error)
	Find() ([]*model.PauseRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PauseRecord, err error)
	FindInBatches(result *[]*model.PauseRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.PauseRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPauseRecordDo
	Assign(attrs ...field.AssignExpr) IPauseRecordDo
	Joins(fields ...field.RelationField) IPauseRecordDo
	Preload(fields ...field.RelationField) IPauseRecordDo
	FirstOrInit() (*model.PauseRecord, error)
	FirstOrCreate() (*model.PauseRecord, error)
	FindByPage(offset int, limit int) (result []*model.PauseRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPauseRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p pauseRecordDo) Debug() IPauseRecordDo {
	return p.withDO(p.DO.Debug())
}

func (p pauseRecordDo) WithContext(ctx context.Context) IPauseRecordDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pauseRecordDo) ReadDB() IPauseRecordDo {
	return p.Clauses(dbresolver.Read)
}

func (p pauseRecordDo) WriteDB() IPauseRecordDo {
	return p.Clauses(dbresolver.Write)
}

func (p pauseRecordDo) Session(config *gorm.Session) IPauseRecordDo {
	return p.withDO(p.DO.Session(config))
}

func (p pauseRecordDo) Clauses(conds ...clause.Expression) IPauseRecordDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pauseRecordDo) Returning(value interface{}, columns ...string) IPauseRecordDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pauseRecordDo) Not(conds ...gen.Condition) IPauseRecordDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pauseRecordDo) Or(conds ...gen.Condition) IPauseRecordDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pauseRecordDo) Select(conds ...field.Expr) IPauseRecordDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pauseRecordDo) Where(conds ...gen.Condition) IPauseRecordDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pauseRecordDo) Order(conds ...field.Expr) IPauseRecordDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pauseRecordDo) Distinct(cols ...field.Expr) IPauseRecordDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pauseRecordDo) Omit(cols ...field.Expr) IPauseRecordDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pauseRecordDo) Join(table schema.Tabler, on ...field.Expr) IPauseRecordDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pauseRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPauseRecordDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pauseRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IPauseRecordDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pauseRecordDo) Group(cols ...field.Expr) IPauseRecordDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pauseRecordDo) Having(conds ...gen.Condition) IPauseRecordDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pauseRecordDo) Limit(limit int) IPauseRecordDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pauseRecordDo) Offset(offset int) IPauseRecordDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pauseRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPauseRecordDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pauseRecordDo) Unscoped() IPauseRecordDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pauseRecordDo) Create(values ...*model.PauseRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pauseRecordDo) CreateInBatches(values []*model.PauseRecord, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pauseRecordDo) Save(values ...*model.PauseRecord) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pauseRecordDo) First() (*model.PauseRecord, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PauseRecord), nil
	}
}

func (p pauseRecordDo) Take() (*model.PauseRecord, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PauseRecord), nil
	}
}

func (p pauseRecordDo) Last() (*model.PauseRecord, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PauseRecord), nil
	}
}

func (p pauseRecordDo) Find() ([]*model.PauseRecord, error) {
	result, err := p.DO.Find()
	return result.([]*model.PauseRecord), err
}

func (p pauseRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PauseRecord, err error) {
	buf := make([]*model.PauseRecord, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pauseRecordDo) FindInBatches(result *[]*model.PauseRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pauseRecordDo) Attrs(attrs ...field.AssignExpr) IPauseRecordDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pauseRecordDo) Assign(attrs ...field.AssignExpr) IPauseRecordDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pauseRecordDo) Joins(fields ...field.RelationField) IPauseRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pauseRecordDo) Preload(fields ...field.RelationField) IPauseRecordDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pauseRecordDo) FirstOrInit() (*model.PauseRecord, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PauseRecord), nil
	}
}

func (p pauseRecordDo) FirstOrCreate() (*model.PauseRecord, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PauseRecord), nil
	}
}

func (p pauseRecordDo) FindByPage(offset int, limit int) (result []*model.PauseRecord, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pauseRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pauseRecordDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pauseRecordDo) Delete(models ...*model.PauseRecord) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pauseRecordDo) withDO(do gen.Dao) *pauseRecordDo {
	p.DO = *do.(*gen.DO)
	return p
}
