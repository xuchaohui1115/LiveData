// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	API          *aPI
	CasbinRule   *casbinRule
	Host         *host
	LiveDatum    *liveData
	LiveDetail   *liveDetail
	Menu         *menu
	OperationLog *operationLog
	PauseRecord  *pauseRecord
	Role         *role
	RoleMenu     *roleMenu
	SuperAdmin   *superAdmin
	User         *user
	UserRole     *userRole
	Violation    *violations
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	API = &Q.API
	CasbinRule = &Q.CasbinRule
	Host = &Q.Host
	LiveDatum = &Q.LiveDatum
	LiveDetail = &Q.LiveDetail
	Menu = &Q.Menu
	OperationLog = &Q.OperationLog
	PauseRecord = &Q.PauseRecord
	Role = &Q.Role
	RoleMenu = &Q.RoleMenu
	SuperAdmin = &Q.SuperAdmin
	User = &Q.User
	UserRole = &Q.UserRole
	Violation = &Q.Violation
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		API:          newAPI(db, opts...),
		CasbinRule:   newCasbinRule(db, opts...),
		Host:         newHost(db, opts...),
		LiveDatum:    newLiveData(db, opts...),
		LiveDetail:   newLiveDetail(db, opts...),
		Menu:         newMenu(db, opts...),
		OperationLog: newOperationLog(db, opts...),
		PauseRecord:  newPauseRecord(db, opts...),
		Role:         newRole(db, opts...),
		RoleMenu:     newRoleMenu(db, opts...),
		SuperAdmin:   newSuperAdmin(db, opts...),
		User:         newUser(db, opts...),
		UserRole:     newUserRole(db, opts...),
		Violation:    newViolations(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	API          aPI
	CasbinRule   casbinRule
	Host         host
	LiveDatum    liveData
	LiveDetail   liveDetail
	Menu         menu
	OperationLog operationLog
	PauseRecord  pauseRecord
	Role         role
	RoleMenu     roleMenu
	SuperAdmin   superAdmin
	User         user
	UserRole     userRole
	Violation    violations
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		API:          q.API.clone(db),
		CasbinRule:   q.CasbinRule.clone(db),
		Host:         q.Host.clone(db),
		LiveDatum:    q.LiveDatum.clone(db),
		LiveDetail:   q.LiveDetail.clone(db),
		Menu:         q.Menu.clone(db),
		OperationLog: q.OperationLog.clone(db),
		PauseRecord:  q.PauseRecord.clone(db),
		Role:         q.Role.clone(db),
		RoleMenu:     q.RoleMenu.clone(db),
		SuperAdmin:   q.SuperAdmin.clone(db),
		User:         q.User.clone(db),
		UserRole:     q.UserRole.clone(db),
		Violation:    q.Violation.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		API:          q.API.replaceDB(db),
		CasbinRule:   q.CasbinRule.replaceDB(db),
		Host:         q.Host.replaceDB(db),
		LiveDatum:    q.LiveDatum.replaceDB(db),
		LiveDetail:   q.LiveDetail.replaceDB(db),
		Menu:         q.Menu.replaceDB(db),
		OperationLog: q.OperationLog.replaceDB(db),
		PauseRecord:  q.PauseRecord.replaceDB(db),
		Role:         q.Role.replaceDB(db),
		RoleMenu:     q.RoleMenu.replaceDB(db),
		SuperAdmin:   q.SuperAdmin.replaceDB(db),
		User:         q.User.replaceDB(db),
		UserRole:     q.UserRole.replaceDB(db),
		Violation:    q.Violation.replaceDB(db),
	}
}

type queryCtx struct {
	API          IAPIDo
	CasbinRule   ICasbinRuleDo
	Host         IHostDo
	LiveDatum    ILiveDataDo
	LiveDetail   ILiveDetailDo
	Menu         IMenuDo
	OperationLog IOperationLogDo
	PauseRecord  IPauseRecordDo
	Role         IRoleDo
	RoleMenu     IRoleMenuDo
	SuperAdmin   ISuperAdminDo
	User         IUserDo
	UserRole     IUserRoleDo
	Violation    IViolationsDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		API:          q.API.WithContext(ctx),
		CasbinRule:   q.CasbinRule.WithContext(ctx),
		Host:         q.Host.WithContext(ctx),
		LiveDatum:    q.LiveDatum.WithContext(ctx),
		LiveDetail:   q.LiveDetail.WithContext(ctx),
		Menu:         q.Menu.WithContext(ctx),
		OperationLog: q.OperationLog.WithContext(ctx),
		PauseRecord:  q.PauseRecord.WithContext(ctx),
		Role:         q.Role.WithContext(ctx),
		RoleMenu:     q.RoleMenu.WithContext(ctx),
		SuperAdmin:   q.SuperAdmin.WithContext(ctx),
		User:         q.User.WithContext(ctx),
		UserRole:     q.UserRole.WithContext(ctx),
		Violation:    q.Violation.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
